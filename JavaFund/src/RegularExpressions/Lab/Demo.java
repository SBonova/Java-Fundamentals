package RegularExpressions.Lab;

import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Demo {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        //[] - означават или
        // /-> означава старт на регулярният експрешън
        // /-> означава край на регулярния експрешън
        // * -> означава 0 или повече символи
        // /[A-Z][a-z]/g - шаблона ще хвани първата главна буква и първата малка буква от думата
        // Първата буква да е главна и следтова да имаме н на брой малки букви -
        // /[A-Z][a-z]*/g - Искаме до Главната буква да прочетем една или няколко малки букви, като добавим * след малките букви
        // /[A-Z][a-z]+ [A-Z][a-z]+/g-това което казва ме е вземи ми думите които започват с главна буква следтова с една или повече главни букви
        // + - (един или повече символи)означава празно място- спейс, следтова отново да имаме Главна буква и една или повече малки букви и пак + спейс
        // Case sensitive - означава че прави разлика м/у малко п и голямо П
        // /[^abc]/g - ачава отрицание- мачни всичко където не е abc
        // /[0-9]/g - ачава че искаме реинджа от 0 до 9
        // /\w/g - хваща всички думи и цифри като чарове
        // /w+/g - хваща ги като цели думи
        // /[(a-z, A-Z, 0-9, _)]/ - хваща всички думи и цифри като чарове + _ о специален символ
        //[\W]- взима всичко, което се очаква да не се включва или всико обратно на [\w]-иравсички празни мета, спец. символи, точки..
        // [\s]- хваща само спейсовете
        // [\S]- хваща всичко, което не е спейс
        // [\d]- хваща всички числа като чарове
        // [\D]- хваща всичко което не е число
        // /[+\d]*/ -искаме да имаме + и цифра или повече цифри
        // /+/d+ -едно или повече, трябва елемента  число да бъде срещнат поне веднъж преди + да е срещната поне веднъж
        // /+/d? -мачва предишният елемент веднъж или повече пъти
        // /+/d{3} - мачни предишните 3 чила + +-са
        // /[0-9]*/.[0-9]* - мачва десетични числа
        // /[0-9]{2}\.[0-9]{2}\.[0-9]{4} ->03.06.1987

        // GROUPING CONSTRUCTS
        //\d{2}-(\w{3})-\d{4} - 22-Jan-2015- дата е група1, месеца ти е група 2, годината ти е група 3
        //(\d{2})-\w{3}-\d{4}- ()-означава че искаш да вземеш датата от всички месеци в текста
        //(?<dayOfMonth>\d{2})-\w{3}-\d{4}- с (?<name>), даваме име на групата, може да се даде на всички групи
        // /(?:Hi|hello),\s*(\w+)/-нон кептчър група ?: и | - регекс if конструкция т.е казваме че нашият шаблон искаме да започвне или с Hi или с Hello, следтова сме казали че искаме да имаме , после искаме да с \s+ аме да имеме 0 или повече празни символи и накрая сме казали че искаме да имаме \w+ -един или повече символи
        // /\d{2,4}- мачва число което 2 или 4 цифри
        // ,- мачва всички запетай
        // [1-9][0-9]?[A-Z][a-z]{2}-\d{4} - ден от месеца, име на месеца и 4 цифри на годината
        // [1-9][0-9]-[A-Z][a-z]{2}-[1-3][0-9]{3}- така хващаме ако ни въведът невалидна година

        //EMAIL VALIDATION
        //user name + @  + domain-> \w+@[A-Za-z]+\.[A-Za-z]+
        //разделено на групи-> /(?<username>\w+)@(?<domainName>[A-Za-z]+\.[A-Za-z]))

        //ВАЛИДИРАНЕ НА HTML
        // /<(\w+)[^>]*>.*?<\/\1>/   - )[^>]* -хваща всичко което не е името на нашият таг т.е href="https://softuni.bg"
        // pattern -> държи регекса - Pattern pattern = Pattern.compile("a*b");
        //matcher -> държи резулта - Matcher matcher = pattern.matcher("aaaab");
        // boolean match = matcher.find(); - намира матчовете
        //String matchText = matcher.group(); - взема информацията за която е мачнала групата
        String text = "Andy: 123";
        String pattern = "([A-Z][a-z]+): (?<number>\\d+)";//имаме една главна буква и една или повече малки букви: (?<number>\\d+)-група която се казва number и е от числа

        Pattern regex = Pattern.compile(pattern);
        Matcher matcher = regex.matcher(text);

        System.out.println(matcher.find());        //true
        System.out.println(matcher.group());      //Andy: 123
        System.out.println(matcher.group(0));     //Andy: 123
        System.out.println(matcher.group(1));     //Andy
        System.out.println(matcher.group(2));    //123
        System.out.println(matcher.group("number"));//123





    }
}
